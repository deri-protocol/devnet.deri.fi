{"version":3,"file":"static/js/538.852fbcae.chunk.js","mappings":"2KAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,WAAAA,SAAWC,GAEjBC,QAAQC,IAARD,aAAyBE,EAAAA,EAAAA,OAAzB,iBAAgEH,G,KAE7DI,KAAKD,EAAAA,EAAAA,OAAuBH,I,EAGzBK,UAAAA,SAAUC,GAEhBL,QAAQC,IAARD,aAAyBE,EAAAA,EAAAA,MAAzB,iBAA+DG,G,KAE5DF,KAAKD,EAAAA,EAAAA,MAAsBG,I,EAGxBC,eAAAA,WAENN,QAAQC,IAARD,aAAyBE,EAAAA,EAAAA,WAAzB,K,KAEGC,KAAKD,EAAAA,EAAAA,a,EAhCd,CAAgDK,EAAAA,e,ifCAhD,IAUaC,EAAb,Y,QASE,c,MAAcC,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,SAAUf,EAAAA,EAAAA,kB,OAChDgB,EAAAA,EAAAA,KAAAA,KAAM,CAAEhB,kBAAmBA,KAA3B,MAEKY,IAAMA,EACXI,EAAKH,QAAUA,EACfG,EAAKF,WAAaA,EAClBE,EAAKD,SAAWA,IAAY,EAE5BC,EAAKC,mBAAqBD,EAAKC,mBAAmBC,KAAxB,MAC1BF,EAAKG,sBAAwBH,EAAKG,sBAAsBD,KAA3B,M,IAlBjCE,G,EAAAA,G,sEAAA,yBAAAC,EAqBeC,SArBf,e,MAyBMC,K,oCAWqBC,EAAKC,SAASC,QAAQ,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,IAAMC,EAAUD,EAAS,GAKzB,OAHAJ,EAAKC,SAASK,GAAG,eAAgBN,EAAKP,oBACtCO,EAAKC,SAASK,GAAG,kBAAmBN,EAAKL,uBAElC,CAAEM,SAAUD,EAAKC,SAAUI,QAASA,O,gBArBvCE,OAAOC,WAAiD,IAArCD,OAAOC,SAASC,iBAErCT,EAAKC,SAAWM,OAAOC,a,sBACbR,EAAKU,W,uBACU,uDAAqBC,MAAK,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,MAA7C,eAAnBC,GACNb,EAAKU,WAAa,IAAIG,EAAJ,GAChBxB,QAASW,EAAKX,QACdE,SAAUS,EAAKT,UACXS,EAAKV,WAAa,CAAEA,WAAYU,EAAKV,YAAe,KAE1DU,EAAKC,SAAWD,EAAKU,WAAWI,iBAAiBd,EAAKZ,IA3C3C,M,kGAUjB,MAAA2B,GAAA,sBAAAA,KAAAlB,EA+CemB,YA/Cf,eAgDI,OAAO,QAAP,QAAOjB,KAAKE,UAhDhB,MAAAc,GAAA,sBAAAA,KAAAlB,EAmDeoB,WAnDf,eAoDI,OAAO,QAAP,QAAOlB,KAAKE,SAASiB,SApDzB,MAAAH,GAAA,sBAAAA,KAAAlB,EAuDesB,WAvDf,e,uBAwD2BpB,KAAKE,SAASC,QAAQ,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,OAAOA,EAAS,MA3DpB,MAAAW,GAAA,sBAAAA,KAAAlB,EA8DSuB,WAAA,WACLrB,KAAKE,SAASoB,eAAe,eAAgBtB,KAAKN,oBAClDM,KAAKE,SAASoB,eAAe,kBAAmBtB,KAAKJ,wBAhEzDE,EAmEeyB,MAnEf,e,OAoEIvB,KAAKE,SAASqB,QAAdvB,KACKd,iB,kBArET,MAAA8B,GAAA,sBAAAA,KAAAlB,EAwEUJ,mBAAA,SAAmByB,GAEvBvC,QAAQC,IAAI,6CAA8CsC,GAE5DnB,KAAKtB,WAAW,CAAEyC,QAASA,KA5E/BrB,EA+EUF,sBAAA,SAAsBS,GAE1BzB,QAAQC,IAAI,gDAAiDwB,GAE/DL,KAAKtB,WAAW,CAAE4B,QAASD,EAAS,MAnFxC,GAAyC7B,EAAAA","sources":["../node_modules/@web3-react/abstract-connector/src/index.ts","../node_modules/@web3-react/walletlink-connector/src/index.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n","import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","console","log","ConnectorEvent","emit","emitError","error","emitDeactivate","EventEmitter","WalletLinkConnector","url","appName","appLogoUrl","darkMode","_this","handleChainChanged","bind","handleAccountsChanged","_inheritsLoose","_proto","activate","this","_this3","provider","request","method","accounts","account","on","window","ethereum","isCoinbaseWallet","walletLink","then","m","WalletLink","makeWeb3Provider","e","getProvider","getChainId","chainId","getAccount","deactivate","removeListener","close"],"sourceRoot":""}