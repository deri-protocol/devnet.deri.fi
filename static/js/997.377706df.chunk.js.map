{"version":3,"file":"static/js/997.377706df.chunk.js","mappings":"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","sources":["../node_modules/@web3-react/abstract-connector/src/index.ts","../node_modules/@web3-react/frame-connector/src/index.ts","../node_modules/eth-provider/ConnectionManager/index.js","../node_modules/eth-provider/browser.js","../node_modules/eth-provider/connections/http.js","../node_modules/eth-provider/connections/injected.js","../node_modules/eth-provider/connections/unavailable.js","../node_modules/eth-provider/connections/ws.js","../node_modules/eth-provider/parse/index.js","../node_modules/eth-provider/presets/index.js","../node_modules/eth-provider/provider/index.js","../node_modules/eth-provider/resolve/index.js","../node_modules/ethereum-provider/index.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n","import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport ethProvider from 'eth-provider'\nimport invariant from 'tiny-invariant'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class FrameConnector extends AbstractConnector {\n  private provider: any\n\n  constructor(kwargs: Required<AbstractConnectorArguments>) {\n    invariant(kwargs.supportedChainIds.length === 1, 'This connector only supports 1 chainId at the moment.')\n    super(kwargs)\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  private handleNetworkChanged(networkId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId)\n    }\n    this.emitUpdate({ provider: this.provider, chainId: networkId })\n  }\n\n  private handleChainChanged(chainId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts.length === 0 ? null : accounts[0] })\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason)\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      this.provider = ethProvider('frame')\n    }\n\n    this.provider\n      .on('networkChanged', this.handleNetworkChanged)\n      .on('chainChanged', this.handleChainChanged)\n      .on('accountsChanged', this.handleAccountsChanged)\n      .on('close', this.handleClose)\n\n    const account = await this.provider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        if (error && (error as any).code === 4001) {\n          throw new UserRejectedRequestError()\n        } else {\n          throw error\n        }\n      })\n\n    return { provider: this.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider\n      .removeListener('networkChanged', this.handleNetworkChanged)\n      .removeListener('chainChanged', this.handleChainChanged)\n      .removeListener('accountsChanged', this.handleAccountsChanged)\n      .removeListener('close', this.handleClose)\n  }\n}\n","const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n","const resolve = require('./resolve')\nconst provider = require('./provider')\nconst presets = require('./presets')\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n}\n\nmodule.exports = (targets = ['injected', 'frame'], options = {}) => provider(connections, resolve(targets, presets), options)\n","const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n","const EventEmitter = require('events')\n\nclass InjectedConnection extends EventEmitter {\n  constructor (_injected, options) {\n    super()\n    if (_injected) {\n      setTimeout(() => this.emit('error', new Error('Injected web3 provider is not currently supported')), 0)\n    } else {\n      setTimeout(() => this.emit('error', new Error('No injected provider found')), 0)\n    }\n  }\n}\n\nmodule.exports = injected => options => new InjectedConnection(injected, options)\n","const EventEmitter = require('events')\n\nclass UnavailableConnection extends EventEmitter {\n  constructor (message) {\n    super()\n    setTimeout(() => this.emit('error', new Error(message)), 0)\n  }\n}\n\nmodule.exports = message => () => new UnavailableConnection(message)\n","const EventEmitter = require('events')\nconst parse = require('../parse')\nconst dev = process.env.NODE_ENV === 'development'\n\nlet WebSocket\n\nclass WebSocketConnection extends EventEmitter {\n  constructor (_WebSocket, url, options) {\n    super()\n    WebSocket = _WebSocket\n    setTimeout(() => this.create(url, options), 0)\n  }\n\n  create (url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'))\n    try { this.socket = new WebSocket(url) } catch (e) { return this.emit('error', e) }\n    this.socket.addEventListener('error', err => this.emit('error', err))\n    this.socket.addEventListener('open', () => {\n      this.emit('connect')\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : ''\n        parse(data, (err, payloads) => {\n          if (err) return //\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload))\n            } else {\n              this.emit('payload', load)\n            }\n          })\n        })\n      })\n      this.socket.addEventListener('close', () => this.onClose())\n    })\n  }\n\n  onClose () {\n    this.socket = null\n    this.closed = true\n    if (dev) console.log('Closing WebSocket connection')\n    this.emit('close')\n    this.removeAllListeners()\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    } else {\n      this.onClose()\n    }\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10)\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false\n      this.error(payload, 'Not connected')\n    } else {\n      this.socket.send(JSON.stringify(payload))\n    }\n  }\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb)\n","let last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n","module.exports = {\n  injected: ['injected'],\n  frame: ['ws://127.0.0.1:1248', 'http://127.0.0.1:1248'],\n  direct: ['ws://127.0.0.1:8546', 'http://127.0.0.1:8545'], // IPC paths will be prepended in Node/Electron\n  infura: ['wss://mainnet.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://mainnet.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRopsten: ['wss://ropsten.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://ropsten.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRinkeby: ['wss://rinkeby.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://rinkeby.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraKovan: ['wss://kovan.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://kovan.infura.io/v3/786ade30f36244469480aa5c2bf0743b']\n}\n","const EventEmitter = require('events')\nconst EthereumProvider = require('ethereum-provider')\nconst ConnectionManager = require('../ConnectionManager')\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n","const getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n","const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","console","log","ConnectorEvent","emit","emitError","error","emitDeactivate","EventEmitter","UserRejectedRequestError","_this","name","constructor","message","_inheritsLoose","Error","FrameConnector","kwargs","length","_this2","handleNetworkChanged","bind","handleChainChanged","handleAccountsChanged","handleClose","_proto","networkId","this","provider","chainId","accounts","account","code","reason","activate","_this4","ethProvider","on","enable","then","e","getProvider","getChainId","send","getAccount","deactivate","removeListener","require","module","exports","connections","targets","options","super","connected","status","interval","inSetup","connect","index","connection","protocol","location","err","listenerCount","warn","connectionError","summary","closing","refresh","target","data","payload","toFixed","clearTimeout","connectTimer","setTimeout","close","id","jsonrpc","closed","resolve","presets","injected","ethereum","window","web3","currentProvider","ws","WebSocket","XHR","XMLHttpRequest","__isProvider","ipc","http","uuid","HTTPConnection","_XHR","url","subscriptions","pollId","create","init","method","params","response","pollSubscriptions","result","subscriptionTimeout","map","p","parse","JSON","filter","n","forEach","removeAllListeners","filterStatus","res","statusText","internal","xhr","responded","abort","load","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","responseText","stringify","InjectedConnection","_injected","UnavailableConnection","WebSocketConnection","_WebSocket","socket","addEventListener","payloads","Array","isArray","onClose","CONNECTING","_","cb","last","values","replace","split","push","frame","direct","infura","infuraRopsten","infuraRinkeby","infuraKovan","EthereumProvider","ConnectionManager","monitor","async","check","t","type","indexOf","setMaxListeners","getProtocol","endsWith","startsWith","concat","nextId","promises","checkConnection","reject","subscription","event","listener","attemptedNetworkSubscription","startNetworkSubscription","attemptedAccountsSubscription","startAccountsSubscription","_send","networkChanged","subscribe","netId","accountsChanged","Promise","coinbase","catch","promise","_sendBatch","requests","all","unsubscribe","success","_id","sendAsync","sendAsyncBatch","results","entry","isConnected"],"sourceRoot":""}